/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.MotorData');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.DataParam');

goog.forwardDeclare('proto.DataAction');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MotorData = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, proto.MotorData.repeatedFields_, null);
};
goog.inherits(proto.MotorData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.MotorData.displayName = 'proto.MotorData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MotorData.repeatedFields_ = [2];


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.MotorData.prototype.toObject = function (opt_includeInstance) {
		return proto.MotorData.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.MotorData} msg The msg instance to transform.
	 * @return {!Object}
	 */
	proto.MotorData.toObject = function (includeInstance, msg) {
		var f, obj = {
			action: jspb.Message.getFieldWithDefault(msg, 1, 0),
			paramlistList: jspb.Message.toObjectList(msg.getParamlistList(),
				proto.DataParam.toObject, includeInstance)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MotorData}
 */
proto.MotorData.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.MotorData;
	return proto.MotorData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MotorData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MotorData}
 */
proto.MotorData.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.DataAction} */ (reader.readEnum());
				msg.setAction(value);
				break;
			case 2:
				var value = new proto.DataParam;
				reader.readMessage(value, proto.DataParam.deserializeBinaryFromReader);
				msg.addParamlist(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MotorData.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.MotorData.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MotorData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MotorData.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getAction();
	if (f !== 0.0) {
		writer.writeEnum(
			1,
			f
		);
	}
	f = message.getParamlistList();
	if (f.length > 0) {
		writer.writeRepeatedMessage(
			2,
			f,
			proto.DataParam.serializeBinaryToWriter
		);
	}
};


/**
 * optional DataAction action = 1;
 * @return {!proto.DataAction}
 */
proto.MotorData.prototype.getAction = function () {
	return /** @type {!proto.DataAction} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.DataAction} value */
proto.MotorData.prototype.setAction = function (value) {
	jspb.Message.setField(this, 1, value);
};


/**
 * repeated DataParam paramList = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.DataParam>}
 */
proto.MotorData.prototype.getParamlistList = function () {
	return /** @type{!Array.<!proto.DataParam>} */ (
		jspb.Message.getRepeatedWrapperField(this, proto.DataParam, 2));
};


/** @param {!Array.<!proto.DataParam>} value */
proto.MotorData.prototype.setParamlistList = function (value) {
	jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.DataParam=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DataParam}
 */
proto.MotorData.prototype.addParamlist = function (opt_value, opt_index) {
	return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.DataParam, opt_index);
};


proto.MotorData.prototype.clearParamlistList = function () {
	this.setParamlistList([]);
};


