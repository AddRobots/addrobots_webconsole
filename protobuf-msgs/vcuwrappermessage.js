/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.VcuWrapperMessage');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.Drive');
goog.require('proto.Halt');
goog.require('proto.Orbit');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VcuWrapperMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.VcuWrapperMessage.oneofGroups_);
};
goog.inherits(proto.VcuWrapperMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VcuWrapperMessage.displayName = 'proto.VcuWrapperMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.VcuWrapperMessage.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.VcuWrapperMessage.MsgCase = {
  MSG_NOT_SET: 0,
  DRIVE: 1,
  ORBIT: 2,
  HALT: 3
};

/**
 * @return {proto.VcuWrapperMessage.MsgCase}
 */
proto.VcuWrapperMessage.prototype.getMsgCase = function() {
  return /** @type {proto.VcuWrapperMessage.MsgCase} */(jspb.Message.computeOneofCase(this, proto.VcuWrapperMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VcuWrapperMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.VcuWrapperMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VcuWrapperMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VcuWrapperMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    drive: (f = msg.getDrive()) && proto.Drive.toObject(includeInstance, f),
    orbit: (f = msg.getOrbit()) && proto.Orbit.toObject(includeInstance, f),
    halt: (f = msg.getHalt()) && proto.Halt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VcuWrapperMessage}
 */
proto.VcuWrapperMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VcuWrapperMessage;
  return proto.VcuWrapperMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VcuWrapperMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VcuWrapperMessage}
 */
proto.VcuWrapperMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Drive;
      reader.readMessage(value,proto.Drive.deserializeBinaryFromReader);
      msg.setDrive(value);
      break;
    case 2:
      var value = new proto.Orbit;
      reader.readMessage(value,proto.Orbit.deserializeBinaryFromReader);
      msg.setOrbit(value);
      break;
    case 3:
      var value = new proto.Halt;
      reader.readMessage(value,proto.Halt.deserializeBinaryFromReader);
      msg.setHalt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.VcuWrapperMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VcuWrapperMessage.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VcuWrapperMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.VcuWrapperMessage.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDrive();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Drive.serializeBinaryToWriter
    );
  }
  f = this.getOrbit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Orbit.serializeBinaryToWriter
    );
  }
  f = this.getHalt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Halt.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.VcuWrapperMessage} The clone.
 */
proto.VcuWrapperMessage.prototype.cloneMessage = function() {
  return /** @type {!proto.VcuWrapperMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Drive drive = 1;
 * @return {proto.Drive}
 */
proto.VcuWrapperMessage.prototype.getDrive = function() {
  return /** @type{proto.Drive} */ (
    jspb.Message.getWrapperField(this, proto.Drive, 1));
};


/** @param {proto.Drive|undefined} value  */
proto.VcuWrapperMessage.prototype.setDrive = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.VcuWrapperMessage.oneofGroups_[0], value);
};


proto.VcuWrapperMessage.prototype.clearDrive = function() {
  this.setDrive(undefined);
};


/**
 * optional Orbit orbit = 2;
 * @return {proto.Orbit}
 */
proto.VcuWrapperMessage.prototype.getOrbit = function() {
  return /** @type{proto.Orbit} */ (
    jspb.Message.getWrapperField(this, proto.Orbit, 2));
};


/** @param {proto.Orbit|undefined} value  */
proto.VcuWrapperMessage.prototype.setOrbit = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.VcuWrapperMessage.oneofGroups_[0], value);
};


proto.VcuWrapperMessage.prototype.clearOrbit = function() {
  this.setOrbit(undefined);
};


/**
 * optional Halt halt = 3;
 * @return {proto.Halt}
 */
proto.VcuWrapperMessage.prototype.getHalt = function() {
  return /** @type{proto.Halt} */ (
    jspb.Message.getWrapperField(this, proto.Halt, 3));
};


/** @param {proto.Halt|undefined} value  */
proto.VcuWrapperMessage.prototype.setHalt = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.VcuWrapperMessage.oneofGroups_[0], value);
};


proto.VcuWrapperMessage.prototype.clearHalt = function() {
  this.setHalt(undefined);
};


