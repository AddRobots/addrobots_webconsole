/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.MotorMsg', null, global);
goog.exportSymbol('proto.MotorMsg.Cmd', null, global);
goog.exportSymbol('proto.MotorMsg.Cmd.Action', null, global);
goog.exportSymbol('proto.MotorMsg.Cmd.Param', null, global);
goog.exportSymbol('proto.MotorMsg.Cmd.Param.Id', null, global);
goog.exportSymbol('proto.MotorMsg.Data', null, global);
goog.exportSymbol('proto.MotorMsg.Data.Action', null, global);
goog.exportSymbol('proto.MotorMsg.Data.Param', null, global);
goog.exportSymbol('proto.MotorMsg.Data.Param.Id', null, global);
goog.exportSymbol('proto.MotorMsg.Unit', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MotorMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.MotorMsg.oneofGroups_);
};
goog.inherits(proto.MotorMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MotorMsg.displayName = 'proto.MotorMsg';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.MotorMsg.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.MotorMsg.ContentCase = {
  CONTENT_NOT_SET: 0,
  MOTOR_DATA: 2,
  MOTOR_CMD: 3
};

/**
 * @return {proto.MotorMsg.ContentCase}
 */
proto.MotorMsg.prototype.getContentCase = function() {
  return /** @type {proto.MotorMsg.ContentCase} */(jspb.Message.computeOneofCase(this, proto.MotorMsg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MotorMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.MotorMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MotorMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MotorMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    motorData: (f = msg.getMotorData()) && proto.MotorMsg.Data.toObject(includeInstance, f),
    motorCmd: (f = msg.getMotorCmd()) && proto.MotorMsg.Cmd.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MotorMsg}
 */
proto.MotorMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MotorMsg;
  return proto.MotorMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MotorMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MotorMsg}
 */
proto.MotorMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.MotorMsg.Data;
      reader.readMessage(value,proto.MotorMsg.Data.deserializeBinaryFromReader);
      msg.setMotorData(value);
      break;
    case 3:
      var value = new proto.MotorMsg.Cmd;
      reader.readMessage(value,proto.MotorMsg.Cmd.deserializeBinaryFromReader);
      msg.setMotorCmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MotorMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MotorMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MotorMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MotorMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMotorData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MotorMsg.Data.serializeBinaryToWriter
    );
  }
  f = message.getMotorCmd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.MotorMsg.Cmd.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.MotorMsg.Unit = {
  UNKNOWN_UNIT: 0,
  STRING: 1,
  BOOLEAN: 2,
  INTEGER: 3,
  DOUBLE: 4,
  SECOND: 5,
  DEGREE: 6,
  AMP: 7,
  VOLT: 8,
  NEWTON: 9,
  UHENRY: 10
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MotorMsg.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MotorMsg.Data.repeatedFields_, null);
};
goog.inherits(proto.MotorMsg.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MotorMsg.Data.displayName = 'proto.MotorMsg.Data';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MotorMsg.Data.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MotorMsg.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.MotorMsg.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MotorMsg.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MotorMsg.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    paramsList: jspb.Message.toObjectList(msg.getParamsList(),
    proto.MotorMsg.Data.Param.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MotorMsg.Data}
 */
proto.MotorMsg.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MotorMsg.Data;
  return proto.MotorMsg.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MotorMsg.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MotorMsg.Data}
 */
proto.MotorMsg.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MotorMsg.Data.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = new proto.MotorMsg.Data.Param;
      reader.readMessage(value,proto.MotorMsg.Data.Param.deserializeBinaryFromReader);
      msg.addParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MotorMsg.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MotorMsg.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MotorMsg.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MotorMsg.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MotorMsg.Data.Param.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.MotorMsg.Data.Action = {
  UKNONWN_ACTION: 0,
  GET: 1,
  RESULT: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MotorMsg.Data.Param = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MotorMsg.Data.Param, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MotorMsg.Data.Param.displayName = 'proto.MotorMsg.Data.Param';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MotorMsg.Data.Param.prototype.toObject = function(opt_includeInstance) {
  return proto.MotorMsg.Data.Param.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MotorMsg.Data.Param} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MotorMsg.Data.Param.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    unit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MotorMsg.Data.Param}
 */
proto.MotorMsg.Data.Param.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MotorMsg.Data.Param;
  return proto.MotorMsg.Data.Param.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MotorMsg.Data.Param} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MotorMsg.Data.Param}
 */
proto.MotorMsg.Data.Param.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MotorMsg.Data.Param.Id} */ (reader.readEnum());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!proto.MotorMsg.Unit} */ (reader.readEnum());
      msg.setUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MotorMsg.Data.Param.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MotorMsg.Data.Param.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MotorMsg.Data.Param} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MotorMsg.Data.Param.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getUnit();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.MotorMsg.Data.Param.Id = {
  UNKNOWN_ID: 0,
  UUID: 1,
  VERSION: 2,
  MFG_DATE_YYYYMMDD: 3,
  MFG_ID: 4,
  MODEL_ID: 5,
  STEP_COUNT: 6,
  INDUCTANCE: 8,
  CUR_POS: 12,
  CUR_AMP: 13,
  CUR_VOLT: 14
};

/**
 * optional Id id = 1;
 * @return {!proto.MotorMsg.Data.Param.Id}
 */
proto.MotorMsg.Data.Param.prototype.getId = function() {
  return /** @type {!proto.MotorMsg.Data.Param.Id} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.MotorMsg.Data.Param.Id} value */
proto.MotorMsg.Data.Param.prototype.setId = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.MotorMsg.Data.Param.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.MotorMsg.Data.Param.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional Unit unit = 3;
 * @return {!proto.MotorMsg.Unit}
 */
proto.MotorMsg.Data.Param.prototype.getUnit = function() {
  return /** @type {!proto.MotorMsg.Unit} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.MotorMsg.Unit} value */
proto.MotorMsg.Data.Param.prototype.setUnit = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Action action = 1;
 * @return {!proto.MotorMsg.Data.Action}
 */
proto.MotorMsg.Data.prototype.getAction = function() {
  return /** @type {!proto.MotorMsg.Data.Action} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.MotorMsg.Data.Action} value */
proto.MotorMsg.Data.prototype.setAction = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated Param params = 2;
 * @return {!Array.<!proto.MotorMsg.Data.Param>}
 */
proto.MotorMsg.Data.prototype.getParamsList = function() {
  return /** @type{!Array.<!proto.MotorMsg.Data.Param>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MotorMsg.Data.Param, 2));
};


/** @param {!Array.<!proto.MotorMsg.Data.Param>} value */
proto.MotorMsg.Data.prototype.setParamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MotorMsg.Data.Param=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MotorMsg.Data.Param}
 */
proto.MotorMsg.Data.prototype.addParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MotorMsg.Data.Param, opt_index);
};


proto.MotorMsg.Data.prototype.clearParamsList = function() {
  this.setParamsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MotorMsg.Cmd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MotorMsg.Cmd.repeatedFields_, null);
};
goog.inherits(proto.MotorMsg.Cmd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MotorMsg.Cmd.displayName = 'proto.MotorMsg.Cmd';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MotorMsg.Cmd.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MotorMsg.Cmd.prototype.toObject = function(opt_includeInstance) {
  return proto.MotorMsg.Cmd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MotorMsg.Cmd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MotorMsg.Cmd.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    paramsList: jspb.Message.toObjectList(msg.getParamsList(),
    proto.MotorMsg.Cmd.Param.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MotorMsg.Cmd}
 */
proto.MotorMsg.Cmd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MotorMsg.Cmd;
  return proto.MotorMsg.Cmd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MotorMsg.Cmd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MotorMsg.Cmd}
 */
proto.MotorMsg.Cmd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MotorMsg.Cmd.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = new proto.MotorMsg.Cmd.Param;
      reader.readMessage(value,proto.MotorMsg.Cmd.Param.deserializeBinaryFromReader);
      msg.addParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MotorMsg.Cmd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MotorMsg.Cmd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MotorMsg.Cmd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MotorMsg.Cmd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MotorMsg.Cmd.Param.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.MotorMsg.Cmd.Action = {
  UNKNOWN: 0,
  BRAKE: 1,
  FREEWHEEL: 2,
  RUN: 3,
  GOTO_POS: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MotorMsg.Cmd.Param = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MotorMsg.Cmd.Param, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MotorMsg.Cmd.Param.displayName = 'proto.MotorMsg.Cmd.Param';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MotorMsg.Cmd.Param.prototype.toObject = function(opt_includeInstance) {
  return proto.MotorMsg.Cmd.Param.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MotorMsg.Cmd.Param} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MotorMsg.Cmd.Param.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    unit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MotorMsg.Cmd.Param}
 */
proto.MotorMsg.Cmd.Param.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MotorMsg.Cmd.Param;
  return proto.MotorMsg.Cmd.Param.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MotorMsg.Cmd.Param} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MotorMsg.Cmd.Param}
 */
proto.MotorMsg.Cmd.Param.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MotorMsg.Cmd.Param.Id} */ (reader.readEnum());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!proto.MotorMsg.Unit} */ (reader.readEnum());
      msg.setUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MotorMsg.Cmd.Param.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MotorMsg.Cmd.Param.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MotorMsg.Cmd.Param} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MotorMsg.Cmd.Param.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getUnit();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.MotorMsg.Cmd.Param.Id = {
  UNKNOWN_PARAM: 0,
  CLOCKWISE: 1,
  POSITION: 2,
  VELOCITY: 3,
  ACCEL: 4,
  HOLD_TORQUE: 5,
  BREAKAWAY: 6,
  MIN_CURRENT_LIMIT: 7,
  MAX_CURRENT_LIMIT: 8,
  MIN_VOLT_VELOCITY: 9,
  MAX_VOLT_VELOCITY: 10,
  MIN_VOLTAGE_LIMIT: 11,
  MAX_VOLTAGE_LIMIT: 12
};

/**
 * optional Id id = 1;
 * @return {!proto.MotorMsg.Cmd.Param.Id}
 */
proto.MotorMsg.Cmd.Param.prototype.getId = function() {
  return /** @type {!proto.MotorMsg.Cmd.Param.Id} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.MotorMsg.Cmd.Param.Id} value */
proto.MotorMsg.Cmd.Param.prototype.setId = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.MotorMsg.Cmd.Param.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.MotorMsg.Cmd.Param.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional Unit unit = 3;
 * @return {!proto.MotorMsg.Unit}
 */
proto.MotorMsg.Cmd.Param.prototype.getUnit = function() {
  return /** @type {!proto.MotorMsg.Unit} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.MotorMsg.Unit} value */
proto.MotorMsg.Cmd.Param.prototype.setUnit = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Action action = 1;
 * @return {!proto.MotorMsg.Cmd.Action}
 */
proto.MotorMsg.Cmd.prototype.getAction = function() {
  return /** @type {!proto.MotorMsg.Cmd.Action} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.MotorMsg.Cmd.Action} value */
proto.MotorMsg.Cmd.prototype.setAction = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated Param params = 2;
 * @return {!Array.<!proto.MotorMsg.Cmd.Param>}
 */
proto.MotorMsg.Cmd.prototype.getParamsList = function() {
  return /** @type{!Array.<!proto.MotorMsg.Cmd.Param>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MotorMsg.Cmd.Param, 2));
};


/** @param {!Array.<!proto.MotorMsg.Cmd.Param>} value */
proto.MotorMsg.Cmd.prototype.setParamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MotorMsg.Cmd.Param=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MotorMsg.Cmd.Param}
 */
proto.MotorMsg.Cmd.prototype.addParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MotorMsg.Cmd.Param, opt_index);
};


proto.MotorMsg.Cmd.prototype.clearParamsList = function() {
  this.setParamsList([]);
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.MotorMsg.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MotorMsg.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Data motor_data = 2;
 * @return {?proto.MotorMsg.Data}
 */
proto.MotorMsg.prototype.getMotorData = function() {
  return /** @type{?proto.MotorMsg.Data} */ (
    jspb.Message.getWrapperField(this, proto.MotorMsg.Data, 2));
};


/** @param {?proto.MotorMsg.Data|undefined} value */
proto.MotorMsg.prototype.setMotorData = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.MotorMsg.oneofGroups_[0], value);
};


proto.MotorMsg.prototype.clearMotorData = function() {
  this.setMotorData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MotorMsg.prototype.hasMotorData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Cmd motor_cmd = 3;
 * @return {?proto.MotorMsg.Cmd}
 */
proto.MotorMsg.prototype.getMotorCmd = function() {
  return /** @type{?proto.MotorMsg.Cmd} */ (
    jspb.Message.getWrapperField(this, proto.MotorMsg.Cmd, 3));
};


/** @param {?proto.MotorMsg.Cmd|undefined} value */
proto.MotorMsg.prototype.setMotorCmd = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.MotorMsg.oneofGroups_[0], value);
};


proto.MotorMsg.prototype.clearMotorCmd = function() {
  this.setMotorCmd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MotorMsg.prototype.hasMotorCmd = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);
