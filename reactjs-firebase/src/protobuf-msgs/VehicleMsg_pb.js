/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.VehicleMsg', null, global);
goog.exportSymbol('proto.VehicleMsg.Drive', null, global);
goog.exportSymbol('proto.VehicleMsg.Halt', null, global);
goog.exportSymbol('proto.VehicleMsg.Orbit', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VehicleMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.VehicleMsg.oneofGroups_);
};
goog.inherits(proto.VehicleMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VehicleMsg.displayName = 'proto.VehicleMsg';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.VehicleMsg.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.VehicleMsg.MsgCase = {
  MSG_NOT_SET: 0,
  DRIVE: 1,
  ORBIT: 2,
  HALT: 3
};

/**
 * @return {proto.VehicleMsg.MsgCase}
 */
proto.VehicleMsg.prototype.getMsgCase = function() {
  return /** @type {proto.VehicleMsg.MsgCase} */(jspb.Message.computeOneofCase(this, proto.VehicleMsg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VehicleMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.VehicleMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VehicleMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VehicleMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    drive: (f = msg.getDrive()) && proto.VehicleMsg.Drive.toObject(includeInstance, f),
    orbit: (f = msg.getOrbit()) && proto.VehicleMsg.Orbit.toObject(includeInstance, f),
    halt: (f = msg.getHalt()) && proto.VehicleMsg.Halt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VehicleMsg}
 */
proto.VehicleMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VehicleMsg;
  return proto.VehicleMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VehicleMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VehicleMsg}
 */
proto.VehicleMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VehicleMsg.Drive;
      reader.readMessage(value,proto.VehicleMsg.Drive.deserializeBinaryFromReader);
      msg.setDrive(value);
      break;
    case 2:
      var value = new proto.VehicleMsg.Orbit;
      reader.readMessage(value,proto.VehicleMsg.Orbit.deserializeBinaryFromReader);
      msg.setOrbit(value);
      break;
    case 3:
      var value = new proto.VehicleMsg.Halt;
      reader.readMessage(value,proto.VehicleMsg.Halt.deserializeBinaryFromReader);
      msg.setHalt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VehicleMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VehicleMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VehicleMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VehicleMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDrive();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VehicleMsg.Drive.serializeBinaryToWriter
    );
  }
  f = message.getOrbit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VehicleMsg.Orbit.serializeBinaryToWriter
    );
  }
  f = message.getHalt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.VehicleMsg.Halt.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VehicleMsg.Halt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VehicleMsg.Halt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VehicleMsg.Halt.displayName = 'proto.VehicleMsg.Halt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VehicleMsg.Halt.prototype.toObject = function(opt_includeInstance) {
  return proto.VehicleMsg.Halt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VehicleMsg.Halt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VehicleMsg.Halt.toObject = function(includeInstance, msg) {
  var f, obj = {
    acceleration: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VehicleMsg.Halt}
 */
proto.VehicleMsg.Halt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VehicleMsg.Halt;
  return proto.VehicleMsg.Halt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VehicleMsg.Halt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VehicleMsg.Halt}
 */
proto.VehicleMsg.Halt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAcceleration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VehicleMsg.Halt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VehicleMsg.Halt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VehicleMsg.Halt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VehicleMsg.Halt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAcceleration();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double acceleration = 1;
 * @return {number}
 */
proto.VehicleMsg.Halt.prototype.getAcceleration = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.VehicleMsg.Halt.prototype.setAcceleration = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VehicleMsg.Orbit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VehicleMsg.Orbit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VehicleMsg.Orbit.displayName = 'proto.VehicleMsg.Orbit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VehicleMsg.Orbit.prototype.toObject = function(opt_includeInstance) {
  return proto.VehicleMsg.Orbit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VehicleMsg.Orbit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VehicleMsg.Orbit.toObject = function(includeInstance, msg) {
  var f, obj = {
    velocity: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    direction: jspb.Message.getFieldWithDefault(msg, 2, ""),
    acceleration: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    degrees: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VehicleMsg.Orbit}
 */
proto.VehicleMsg.Orbit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VehicleMsg.Orbit;
  return proto.VehicleMsg.Orbit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VehicleMsg.Orbit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VehicleMsg.Orbit}
 */
proto.VehicleMsg.Orbit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVelocity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAcceleration(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDegrees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VehicleMsg.Orbit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VehicleMsg.Orbit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VehicleMsg.Orbit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VehicleMsg.Orbit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVelocity();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAcceleration();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getDegrees();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double velocity = 1;
 * @return {number}
 */
proto.VehicleMsg.Orbit.prototype.getVelocity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.VehicleMsg.Orbit.prototype.setVelocity = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional string direction = 2;
 * @return {string}
 */
proto.VehicleMsg.Orbit.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VehicleMsg.Orbit.prototype.setDirection = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double acceleration = 3;
 * @return {number}
 */
proto.VehicleMsg.Orbit.prototype.getAcceleration = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.VehicleMsg.Orbit.prototype.setAcceleration = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double degrees = 4;
 * @return {number}
 */
proto.VehicleMsg.Orbit.prototype.getDegrees = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.VehicleMsg.Orbit.prototype.setDegrees = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VehicleMsg.Drive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VehicleMsg.Drive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VehicleMsg.Drive.displayName = 'proto.VehicleMsg.Drive';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VehicleMsg.Drive.prototype.toObject = function(opt_includeInstance) {
  return proto.VehicleMsg.Drive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VehicleMsg.Drive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VehicleMsg.Drive.toObject = function(includeInstance, msg) {
  var f, obj = {
    velocity: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    direction: jspb.Message.getFieldWithDefault(msg, 2, ""),
    acceleration: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    distance: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    edgeDistance: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    edgeSide: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VehicleMsg.Drive}
 */
proto.VehicleMsg.Drive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VehicleMsg.Drive;
  return proto.VehicleMsg.Drive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VehicleMsg.Drive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VehicleMsg.Drive}
 */
proto.VehicleMsg.Drive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVelocity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAcceleration(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEdgeDistance(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEdgeSide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VehicleMsg.Drive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VehicleMsg.Drive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VehicleMsg.Drive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VehicleMsg.Drive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVelocity();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAcceleration();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getEdgeDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getEdgeSide();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional double velocity = 1;
 * @return {number}
 */
proto.VehicleMsg.Drive.prototype.getVelocity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.VehicleMsg.Drive.prototype.setVelocity = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional string direction = 2;
 * @return {string}
 */
proto.VehicleMsg.Drive.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VehicleMsg.Drive.prototype.setDirection = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double acceleration = 3;
 * @return {number}
 */
proto.VehicleMsg.Drive.prototype.getAcceleration = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.VehicleMsg.Drive.prototype.setAcceleration = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double distance = 4;
 * @return {number}
 */
proto.VehicleMsg.Drive.prototype.getDistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.VehicleMsg.Drive.prototype.setDistance = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double edge_distance = 5;
 * @return {number}
 */
proto.VehicleMsg.Drive.prototype.getEdgeDistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.VehicleMsg.Drive.prototype.setEdgeDistance = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional string edge_side = 6;
 * @return {string}
 */
proto.VehicleMsg.Drive.prototype.getEdgeSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.VehicleMsg.Drive.prototype.setEdgeSide = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Drive drive = 1;
 * @return {?proto.VehicleMsg.Drive}
 */
proto.VehicleMsg.prototype.getDrive = function() {
  return /** @type{?proto.VehicleMsg.Drive} */ (
    jspb.Message.getWrapperField(this, proto.VehicleMsg.Drive, 1));
};


/** @param {?proto.VehicleMsg.Drive|undefined} value */
proto.VehicleMsg.prototype.setDrive = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.VehicleMsg.oneofGroups_[0], value);
};


proto.VehicleMsg.prototype.clearDrive = function() {
  this.setDrive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.VehicleMsg.prototype.hasDrive = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Orbit orbit = 2;
 * @return {?proto.VehicleMsg.Orbit}
 */
proto.VehicleMsg.prototype.getOrbit = function() {
  return /** @type{?proto.VehicleMsg.Orbit} */ (
    jspb.Message.getWrapperField(this, proto.VehicleMsg.Orbit, 2));
};


/** @param {?proto.VehicleMsg.Orbit|undefined} value */
proto.VehicleMsg.prototype.setOrbit = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.VehicleMsg.oneofGroups_[0], value);
};


proto.VehicleMsg.prototype.clearOrbit = function() {
  this.setOrbit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.VehicleMsg.prototype.hasOrbit = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Halt halt = 3;
 * @return {?proto.VehicleMsg.Halt}
 */
proto.VehicleMsg.prototype.getHalt = function() {
  return /** @type{?proto.VehicleMsg.Halt} */ (
    jspb.Message.getWrapperField(this, proto.VehicleMsg.Halt, 3));
};


/** @param {?proto.VehicleMsg.Halt|undefined} value */
proto.VehicleMsg.prototype.setHalt = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.VehicleMsg.oneofGroups_[0], value);
};


proto.VehicleMsg.prototype.clearHalt = function() {
  this.setHalt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.VehicleMsg.prototype.hasHalt = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);
